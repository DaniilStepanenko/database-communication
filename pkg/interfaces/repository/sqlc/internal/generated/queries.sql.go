// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO dvds.customer (store_id,
                           first_name,
                           last_name,
                           email,
                           address_id,
                           activebool,
                           create_date,
                           last_update,
                           active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING customer.customer_id
`

type CreateCustomerParams struct {
	StoreID    int16
	FirstName  string
	LastName   string
	Email      sql.NullString
	AddressID  int16
	Activebool bool
	CreateDate time.Time
	LastUpdate sql.NullTime
	Active     sql.NullInt32
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.StoreID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AddressID,
		arg.Activebool,
		arg.CreateDate,
		arg.LastUpdate,
		arg.Active,
	)
	var customer_id int32
	err := row.Scan(&customer_id)
	return customer_id, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM dvds.customer
WHERE customer.customer_id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, customerID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, customerID)
	return err
}

const findActiveCustomers = `-- name: FindActiveCustomers :many
SELECT customer.customer_id,
       customer.store_id,
       customer.first_name,
       customer.last_name,
       customer.email,
       customer.address_id,
       customer.activebool,
       customer.create_date,
       customer.last_update,
       customer.active
FROM dvds.customer
         INNER JOIN (
    SELECT payment.customer_id,
           MAX(payment.payment_date) AS "max_payment_date"
    FROM dvds.payment
    GROUP BY payment.customer_id
) AS payment ON customer.customer_id = payment.customer_id
WHERE max_payment_date >= $1::TIMESTAMP WITHOUT TIME ZONE
`

func (q *Queries) FindActiveCustomers(ctx context.Context, dollar_1 time.Time) ([]DvdsCustomer, error) {
	rows, err := q.db.QueryContext(ctx, findActiveCustomers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DvdsCustomer
	for rows.Next() {
		var i DvdsCustomer
		if err := rows.Scan(
			&i.CustomerID,
			&i.StoreID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.AddressID,
			&i.Activebool,
			&i.CreateDate,
			&i.LastUpdate,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readCustomer = `-- name: ReadCustomer :one
SELECT customer.store_id,
       customer.first_name,
       customer.last_name,
       customer.email,
       customer.address_id,
       customer.activebool,
       customer.create_date,
       customer.last_update,
       customer.active
FROM dvds.customer
WHERE customer.customer_id = $1
`

type ReadCustomerRow struct {
	StoreID    int16
	FirstName  string
	LastName   string
	Email      sql.NullString
	AddressID  int16
	Activebool bool
	CreateDate time.Time
	LastUpdate sql.NullTime
	Active     sql.NullInt32
}

func (q *Queries) ReadCustomer(ctx context.Context, customerID int32) (ReadCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, readCustomer, customerID)
	var i ReadCustomerRow
	err := row.Scan(
		&i.StoreID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.AddressID,
		&i.Activebool,
		&i.CreateDate,
		&i.LastUpdate,
		&i.Active,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE dvds.customer
SET (store_id, first_name, last_name, email, address_id, activebool, create_date, last_update,
     active) = ($1, $2, $3, $4, $5, $6, $7, $8, $9)
WHERE customer.customer_id = $10
`

type UpdateCustomerParams struct {
	StoreID    int16
	FirstName  string
	LastName   string
	Email      sql.NullString
	AddressID  int16
	Activebool bool
	CreateDate time.Time
	LastUpdate sql.NullTime
	Active     sql.NullInt32
	CustomerID int32
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.StoreID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.AddressID,
		arg.Activebool,
		arg.CreateDate,
		arg.LastUpdate,
		arg.Active,
		arg.CustomerID,
	)
	return err
}

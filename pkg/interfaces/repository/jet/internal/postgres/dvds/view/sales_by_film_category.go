//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SalesByFilmCategory = newSalesByFilmCategoryTable("dvds", "sales_by_film_category", "")

type salesByFilmCategoryTable struct {
	postgres.Table

	//Columns
	Category   postgres.ColumnString
	TotalSales postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SalesByFilmCategoryTable struct {
	salesByFilmCategoryTable

	EXCLUDED salesByFilmCategoryTable
}

// AS creates new SalesByFilmCategoryTable with assigned alias
func (a SalesByFilmCategoryTable) AS(alias string) *SalesByFilmCategoryTable {
	return newSalesByFilmCategoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SalesByFilmCategoryTable with assigned schema name
func (a SalesByFilmCategoryTable) FromSchema(schemaName string) *SalesByFilmCategoryTable {
	return newSalesByFilmCategoryTable(schemaName, a.TableName(), a.Alias())
}

func newSalesByFilmCategoryTable(schemaName, tableName, alias string) *SalesByFilmCategoryTable {
	return &SalesByFilmCategoryTable{
		salesByFilmCategoryTable: newSalesByFilmCategoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newSalesByFilmCategoryTableImpl("", "excluded", ""),
	}
}

func newSalesByFilmCategoryTableImpl(schemaName, tableName, alias string) salesByFilmCategoryTable {
	var (
		CategoryColumn   = postgres.StringColumn("category")
		TotalSalesColumn = postgres.FloatColumn("total_sales")
		allColumns       = postgres.ColumnList{CategoryColumn, TotalSalesColumn}
		mutableColumns   = postgres.ColumnList{CategoryColumn, TotalSalesColumn}
	)

	return salesByFilmCategoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Category:   CategoryColumn,
		TotalSales: TotalSalesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

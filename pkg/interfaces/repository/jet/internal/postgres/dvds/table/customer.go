//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Customer = newCustomerTable("dvds", "customer", "")

type customerTable struct {
	postgres.Table

	//Columns
	CustomerID postgres.ColumnInteger
	StoreID    postgres.ColumnInteger
	FirstName  postgres.ColumnString
	LastName   postgres.ColumnString
	Email      postgres.ColumnString
	AddressID  postgres.ColumnInteger
	Activebool postgres.ColumnBool
	CreateDate postgres.ColumnDate
	LastUpdate postgres.ColumnTimestamp
	Active     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CustomerTable struct {
	customerTable

	EXCLUDED customerTable
}

// AS creates new CustomerTable with assigned alias
func (a CustomerTable) AS(alias string) *CustomerTable {
	return newCustomerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CustomerTable with assigned schema name
func (a CustomerTable) FromSchema(schemaName string) *CustomerTable {
	return newCustomerTable(schemaName, a.TableName(), a.Alias())
}

func newCustomerTable(schemaName, tableName, alias string) *CustomerTable {
	return &CustomerTable{
		customerTable: newCustomerTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCustomerTableImpl("", "excluded", ""),
	}
}

func newCustomerTableImpl(schemaName, tableName, alias string) customerTable {
	var (
		CustomerIDColumn = postgres.IntegerColumn("customer_id")
		StoreIDColumn    = postgres.IntegerColumn("store_id")
		FirstNameColumn  = postgres.StringColumn("first_name")
		LastNameColumn   = postgres.StringColumn("last_name")
		EmailColumn      = postgres.StringColumn("email")
		AddressIDColumn  = postgres.IntegerColumn("address_id")
		ActiveboolColumn = postgres.BoolColumn("activebool")
		CreateDateColumn = postgres.DateColumn("create_date")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		ActiveColumn     = postgres.IntegerColumn("active")
		allColumns       = postgres.ColumnList{CustomerIDColumn, StoreIDColumn, FirstNameColumn, LastNameColumn, EmailColumn, AddressIDColumn, ActiveboolColumn, CreateDateColumn, LastUpdateColumn, ActiveColumn}
		mutableColumns   = postgres.ColumnList{StoreIDColumn, FirstNameColumn, LastNameColumn, EmailColumn, AddressIDColumn, ActiveboolColumn, CreateDateColumn, LastUpdateColumn, ActiveColumn}
	)

	return customerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CustomerID: CustomerIDColumn,
		StoreID:    StoreIDColumn,
		FirstName:  FirstNameColumn,
		LastName:   LastNameColumn,
		Email:      EmailColumn,
		AddressID:  AddressIDColumn,
		Activebool: ActiveboolColumn,
		CreateDate: CreateDateColumn,
		LastUpdate: LastUpdateColumn,
		Active:     ActiveColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

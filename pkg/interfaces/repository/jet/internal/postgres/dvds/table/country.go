//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Country = newCountryTable("dvds", "country", "")

type countryTable struct {
	postgres.Table

	//Columns
	CountryID  postgres.ColumnInteger
	Country    postgres.ColumnString
	LastUpdate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CountryTable struct {
	countryTable

	EXCLUDED countryTable
}

// AS creates new CountryTable with assigned alias
func (a CountryTable) AS(alias string) *CountryTable {
	return newCountryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CountryTable with assigned schema name
func (a CountryTable) FromSchema(schemaName string) *CountryTable {
	return newCountryTable(schemaName, a.TableName(), a.Alias())
}

func newCountryTable(schemaName, tableName, alias string) *CountryTable {
	return &CountryTable{
		countryTable: newCountryTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCountryTableImpl("", "excluded", ""),
	}
}

func newCountryTableImpl(schemaName, tableName, alias string) countryTable {
	var (
		CountryIDColumn  = postgres.IntegerColumn("country_id")
		CountryColumn    = postgres.StringColumn("country")
		LastUpdateColumn = postgres.TimestampColumn("last_update")
		allColumns       = postgres.ColumnList{CountryIDColumn, CountryColumn, LastUpdateColumn}
		mutableColumns   = postgres.ColumnList{CountryColumn, LastUpdateColumn}
	)

	return countryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CountryID:  CountryIDColumn,
		Country:    CountryColumn,
		LastUpdate: LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Rental = newRentalTable("dvds", "rental", "")

type rentalTable struct {
	postgres.Table

	//Columns
	RentalID    postgres.ColumnInteger
	RentalDate  postgres.ColumnTimestamp
	InventoryID postgres.ColumnInteger
	CustomerID  postgres.ColumnInteger
	ReturnDate  postgres.ColumnTimestamp
	StaffID     postgres.ColumnInteger
	LastUpdate  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RentalTable struct {
	rentalTable

	EXCLUDED rentalTable
}

// AS creates new RentalTable with assigned alias
func (a RentalTable) AS(alias string) *RentalTable {
	return newRentalTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RentalTable with assigned schema name
func (a RentalTable) FromSchema(schemaName string) *RentalTable {
	return newRentalTable(schemaName, a.TableName(), a.Alias())
}

func newRentalTable(schemaName, tableName, alias string) *RentalTable {
	return &RentalTable{
		rentalTable: newRentalTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newRentalTableImpl("", "excluded", ""),
	}
}

func newRentalTableImpl(schemaName, tableName, alias string) rentalTable {
	var (
		RentalIDColumn    = postgres.IntegerColumn("rental_id")
		RentalDateColumn  = postgres.TimestampColumn("rental_date")
		InventoryIDColumn = postgres.IntegerColumn("inventory_id")
		CustomerIDColumn  = postgres.IntegerColumn("customer_id")
		ReturnDateColumn  = postgres.TimestampColumn("return_date")
		StaffIDColumn     = postgres.IntegerColumn("staff_id")
		LastUpdateColumn  = postgres.TimestampColumn("last_update")
		allColumns        = postgres.ColumnList{RentalIDColumn, RentalDateColumn, InventoryIDColumn, CustomerIDColumn, ReturnDateColumn, StaffIDColumn, LastUpdateColumn}
		mutableColumns    = postgres.ColumnList{RentalDateColumn, InventoryIDColumn, CustomerIDColumn, ReturnDateColumn, StaffIDColumn, LastUpdateColumn}
	)

	return rentalTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RentalID:    RentalIDColumn,
		RentalDate:  RentalDateColumn,
		InventoryID: InventoryIDColumn,
		CustomerID:  CustomerIDColumn,
		ReturnDate:  ReturnDateColumn,
		StaffID:     StaffIDColumn,
		LastUpdate:  LastUpdateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

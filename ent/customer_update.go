// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DaniilStepanenko/database-communication/ent/customer"
	"github.com/DaniilStepanenko/database-communication/ent/payment"
	"github.com/DaniilStepanenko/database-communication/ent/predicate"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStoreID sets the "store_id" field.
func (cu *CustomerUpdate) SetStoreID(i int) *CustomerUpdate {
	cu.mutation.ResetStoreID()
	cu.mutation.SetStoreID(i)
	return cu
}

// AddStoreID adds i to the "store_id" field.
func (cu *CustomerUpdate) AddStoreID(i int) *CustomerUpdate {
	cu.mutation.AddStoreID(i)
	return cu
}

// SetFirstName sets the "first_name" field.
func (cu *CustomerUpdate) SetFirstName(s string) *CustomerUpdate {
	cu.mutation.SetFirstName(s)
	return cu
}

// SetLastName sets the "last_name" field.
func (cu *CustomerUpdate) SetLastName(s string) *CustomerUpdate {
	cu.mutation.SetLastName(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CustomerUpdate) SetEmail(s string) *CustomerUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableEmail(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// ClearEmail clears the value of the "email" field.
func (cu *CustomerUpdate) ClearEmail() *CustomerUpdate {
	cu.mutation.ClearEmail()
	return cu
}

// SetAddressID sets the "address_id" field.
func (cu *CustomerUpdate) SetAddressID(i int) *CustomerUpdate {
	cu.mutation.ResetAddressID()
	cu.mutation.SetAddressID(i)
	return cu
}

// AddAddressID adds i to the "address_id" field.
func (cu *CustomerUpdate) AddAddressID(i int) *CustomerUpdate {
	cu.mutation.AddAddressID(i)
	return cu
}

// SetActivebool sets the "activebool" field.
func (cu *CustomerUpdate) SetActivebool(b bool) *CustomerUpdate {
	cu.mutation.SetActivebool(b)
	return cu
}

// SetCreateDate sets the "create_date" field.
func (cu *CustomerUpdate) SetCreateDate(t time.Time) *CustomerUpdate {
	cu.mutation.SetCreateDate(t)
	return cu
}

// SetLastUpdate sets the "last_update" field.
func (cu *CustomerUpdate) SetLastUpdate(t time.Time) *CustomerUpdate {
	cu.mutation.SetLastUpdate(t)
	return cu
}

// SetNillableLastUpdate sets the "last_update" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableLastUpdate(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetLastUpdate(*t)
	}
	return cu
}

// ClearLastUpdate clears the value of the "last_update" field.
func (cu *CustomerUpdate) ClearLastUpdate() *CustomerUpdate {
	cu.mutation.ClearLastUpdate()
	return cu
}

// SetActive sets the "active" field.
func (cu *CustomerUpdate) SetActive(i int) *CustomerUpdate {
	cu.mutation.ResetActive()
	cu.mutation.SetActive(i)
	return cu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableActive(i *int) *CustomerUpdate {
	if i != nil {
		cu.SetActive(*i)
	}
	return cu
}

// AddActive adds i to the "active" field.
func (cu *CustomerUpdate) AddActive(i int) *CustomerUpdate {
	cu.mutation.AddActive(i)
	return cu
}

// ClearActive clears the value of the "active" field.
func (cu *CustomerUpdate) ClearActive() *CustomerUpdate {
	cu.mutation.ClearActive()
	return cu
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cu *CustomerUpdate) AddPaymentIDs(ids ...int) *CustomerUpdate {
	cu.mutation.AddPaymentIDs(ids...)
	return cu
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cu *CustomerUpdate) AddPayments(p ...*Payment) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPaymentIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cu *CustomerUpdate) ClearPayments() *CustomerUpdate {
	cu.mutation.ClearPayments()
	return cu
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cu *CustomerUpdate) RemovePaymentIDs(ids ...int) *CustomerUpdate {
	cu.mutation.RemovePaymentIDs(ids...)
	return cu
}

// RemovePayments removes "payments" edges to Payment entities.
func (cu *CustomerUpdate) RemovePayments(p ...*Payment) *CustomerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customer.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.StoreID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldStoreID,
		})
	}
	if value, ok := cu.mutation.AddedStoreID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldStoreID,
		})
	}
	if value, ok := cu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldFirstName,
		})
	}
	if value, ok := cu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldLastName,
		})
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldEmail,
		})
	}
	if cu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldEmail,
		})
	}
	if value, ok := cu.mutation.AddressID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldAddressID,
		})
	}
	if value, ok := cu.mutation.AddedAddressID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldAddressID,
		})
	}
	if value, ok := cu.mutation.Activebool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customer.FieldActivebool,
		})
	}
	if value, ok := cu.mutation.CreateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldCreateDate,
		})
	}
	if value, ok := cu.mutation.LastUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldLastUpdate,
		})
	}
	if cu.mutation.LastUpdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customer.FieldLastUpdate,
		})
	}
	if value, ok := cu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldActive,
		})
	}
	if value, ok := cu.mutation.AddedActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldActive,
		})
	}
	if cu.mutation.ActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: customer.FieldActive,
		})
	}
	if cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cu.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetStoreID sets the "store_id" field.
func (cuo *CustomerUpdateOne) SetStoreID(i int) *CustomerUpdateOne {
	cuo.mutation.ResetStoreID()
	cuo.mutation.SetStoreID(i)
	return cuo
}

// AddStoreID adds i to the "store_id" field.
func (cuo *CustomerUpdateOne) AddStoreID(i int) *CustomerUpdateOne {
	cuo.mutation.AddStoreID(i)
	return cuo
}

// SetFirstName sets the "first_name" field.
func (cuo *CustomerUpdateOne) SetFirstName(s string) *CustomerUpdateOne {
	cuo.mutation.SetFirstName(s)
	return cuo
}

// SetLastName sets the "last_name" field.
func (cuo *CustomerUpdateOne) SetLastName(s string) *CustomerUpdateOne {
	cuo.mutation.SetLastName(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CustomerUpdateOne) SetEmail(s string) *CustomerUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableEmail(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// ClearEmail clears the value of the "email" field.
func (cuo *CustomerUpdateOne) ClearEmail() *CustomerUpdateOne {
	cuo.mutation.ClearEmail()
	return cuo
}

// SetAddressID sets the "address_id" field.
func (cuo *CustomerUpdateOne) SetAddressID(i int) *CustomerUpdateOne {
	cuo.mutation.ResetAddressID()
	cuo.mutation.SetAddressID(i)
	return cuo
}

// AddAddressID adds i to the "address_id" field.
func (cuo *CustomerUpdateOne) AddAddressID(i int) *CustomerUpdateOne {
	cuo.mutation.AddAddressID(i)
	return cuo
}

// SetActivebool sets the "activebool" field.
func (cuo *CustomerUpdateOne) SetActivebool(b bool) *CustomerUpdateOne {
	cuo.mutation.SetActivebool(b)
	return cuo
}

// SetCreateDate sets the "create_date" field.
func (cuo *CustomerUpdateOne) SetCreateDate(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetCreateDate(t)
	return cuo
}

// SetLastUpdate sets the "last_update" field.
func (cuo *CustomerUpdateOne) SetLastUpdate(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetLastUpdate(t)
	return cuo
}

// SetNillableLastUpdate sets the "last_update" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableLastUpdate(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetLastUpdate(*t)
	}
	return cuo
}

// ClearLastUpdate clears the value of the "last_update" field.
func (cuo *CustomerUpdateOne) ClearLastUpdate() *CustomerUpdateOne {
	cuo.mutation.ClearLastUpdate()
	return cuo
}

// SetActive sets the "active" field.
func (cuo *CustomerUpdateOne) SetActive(i int) *CustomerUpdateOne {
	cuo.mutation.ResetActive()
	cuo.mutation.SetActive(i)
	return cuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableActive(i *int) *CustomerUpdateOne {
	if i != nil {
		cuo.SetActive(*i)
	}
	return cuo
}

// AddActive adds i to the "active" field.
func (cuo *CustomerUpdateOne) AddActive(i int) *CustomerUpdateOne {
	cuo.mutation.AddActive(i)
	return cuo
}

// ClearActive clears the value of the "active" field.
func (cuo *CustomerUpdateOne) ClearActive() *CustomerUpdateOne {
	cuo.mutation.ClearActive()
	return cuo
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by IDs.
func (cuo *CustomerUpdateOne) AddPaymentIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.AddPaymentIDs(ids...)
	return cuo
}

// AddPayments adds the "payments" edges to the Payment entity.
func (cuo *CustomerUpdateOne) AddPayments(p ...*Payment) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPaymentIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearPayments clears all "payments" edges to the Payment entity.
func (cuo *CustomerUpdateOne) ClearPayments() *CustomerUpdateOne {
	cuo.mutation.ClearPayments()
	return cuo
}

// RemovePaymentIDs removes the "payments" edge to Payment entities by IDs.
func (cuo *CustomerUpdateOne) RemovePaymentIDs(ids ...int) *CustomerUpdateOne {
	cuo.mutation.RemovePaymentIDs(ids...)
	return cuo
}

// RemovePayments removes "payments" edges to Payment entities.
func (cuo *CustomerUpdateOne) RemovePayments(p ...*Payment) *CustomerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePaymentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	var (
		err  error
		node *Customer
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CustomerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   customer.Table,
			Columns: customer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: customer.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Customer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.StoreID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldStoreID,
		})
	}
	if value, ok := cuo.mutation.AddedStoreID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldStoreID,
		})
	}
	if value, ok := cuo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldFirstName,
		})
	}
	if value, ok := cuo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldLastName,
		})
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: customer.FieldEmail,
		})
	}
	if cuo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: customer.FieldEmail,
		})
	}
	if value, ok := cuo.mutation.AddressID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldAddressID,
		})
	}
	if value, ok := cuo.mutation.AddedAddressID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldAddressID,
		})
	}
	if value, ok := cuo.mutation.Activebool(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: customer.FieldActivebool,
		})
	}
	if value, ok := cuo.mutation.CreateDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldCreateDate,
		})
	}
	if value, ok := cuo.mutation.LastUpdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: customer.FieldLastUpdate,
		})
	}
	if cuo.mutation.LastUpdateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: customer.FieldLastUpdate,
		})
	}
	if value, ok := cuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldActive,
		})
	}
	if value, ok := cuo.mutation.AddedActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: customer.FieldActive,
		})
	}
	if cuo.mutation.ActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: customer.FieldActive,
		})
	}
	if cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPaymentsIDs(); len(nodes) > 0 && !cuo.mutation.PaymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PaymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PaymentsTable,
			Columns: []string{customer.PaymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}

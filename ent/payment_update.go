// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DaniilStepanenko/database-communication/ent/customer"
	"github.com/DaniilStepanenko/database-communication/ent/payment"
	"github.com/DaniilStepanenko/database-communication/ent/predicate"
)

// PaymentUpdate is the builder for updating Payment entities.
type PaymentUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentMutation
}

// Where appends a list predicates to the PaymentUpdate builder.
func (pu *PaymentUpdate) Where(ps ...predicate.Payment) *PaymentUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCustomerID sets the "customer_id" field.
func (pu *PaymentUpdate) SetCustomerID(i int) *PaymentUpdate {
	pu.mutation.SetCustomerID(i)
	return pu
}

// SetStaffID sets the "staff_id" field.
func (pu *PaymentUpdate) SetStaffID(i int) *PaymentUpdate {
	pu.mutation.ResetStaffID()
	pu.mutation.SetStaffID(i)
	return pu
}

// AddStaffID adds i to the "staff_id" field.
func (pu *PaymentUpdate) AddStaffID(i int) *PaymentUpdate {
	pu.mutation.AddStaffID(i)
	return pu
}

// SetRentalID sets the "rental_id" field.
func (pu *PaymentUpdate) SetRentalID(i int) *PaymentUpdate {
	pu.mutation.ResetRentalID()
	pu.mutation.SetRentalID(i)
	return pu
}

// AddRentalID adds i to the "rental_id" field.
func (pu *PaymentUpdate) AddRentalID(i int) *PaymentUpdate {
	pu.mutation.AddRentalID(i)
	return pu
}

// SetAmount sets the "amount" field.
func (pu *PaymentUpdate) SetAmount(f float64) *PaymentUpdate {
	pu.mutation.ResetAmount()
	pu.mutation.SetAmount(f)
	return pu
}

// AddAmount adds f to the "amount" field.
func (pu *PaymentUpdate) AddAmount(f float64) *PaymentUpdate {
	pu.mutation.AddAmount(f)
	return pu
}

// SetPaymentDate sets the "payment_date" field.
func (pu *PaymentUpdate) SetPaymentDate(t time.Time) *PaymentUpdate {
	pu.mutation.SetPaymentDate(t)
	return pu
}

// SetPayerID sets the "payer" edge to the Customer entity by ID.
func (pu *PaymentUpdate) SetPayerID(id int) *PaymentUpdate {
	pu.mutation.SetPayerID(id)
	return pu
}

// SetPayer sets the "payer" edge to the Customer entity.
func (pu *PaymentUpdate) SetPayer(c *Customer) *PaymentUpdate {
	return pu.SetPayerID(c.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (pu *PaymentUpdate) Mutation() *PaymentMutation {
	return pu.mutation
}

// ClearPayer clears the "payer" edge to the Customer entity.
func (pu *PaymentUpdate) ClearPayer() *PaymentUpdate {
	pu.mutation.ClearPayer()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PaymentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PaymentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PaymentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PaymentUpdate) check() error {
	if _, ok := pu.mutation.PayerID(); pu.mutation.PayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Payment.payer"`)
	}
	return nil
}

func (pu *PaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.StaffID(); ok {
		_spec.SetField(payment.FieldStaffID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedStaffID(); ok {
		_spec.AddField(payment.FieldStaffID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.RentalID(); ok {
		_spec.SetField(payment.FieldRentalID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedRentalID(); ok {
		_spec.AddField(payment.FieldRentalID, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedAmount(); ok {
		_spec.AddField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.PaymentDate(); ok {
		_spec.SetField(payment.FieldPaymentDate, field.TypeTime, value)
	}
	if pu.mutation.PayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PayerTable,
			Columns: []string{payment.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PayerTable,
			Columns: []string{payment.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PaymentUpdateOne is the builder for updating a single Payment entity.
type PaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentMutation
}

// SetCustomerID sets the "customer_id" field.
func (puo *PaymentUpdateOne) SetCustomerID(i int) *PaymentUpdateOne {
	puo.mutation.SetCustomerID(i)
	return puo
}

// SetStaffID sets the "staff_id" field.
func (puo *PaymentUpdateOne) SetStaffID(i int) *PaymentUpdateOne {
	puo.mutation.ResetStaffID()
	puo.mutation.SetStaffID(i)
	return puo
}

// AddStaffID adds i to the "staff_id" field.
func (puo *PaymentUpdateOne) AddStaffID(i int) *PaymentUpdateOne {
	puo.mutation.AddStaffID(i)
	return puo
}

// SetRentalID sets the "rental_id" field.
func (puo *PaymentUpdateOne) SetRentalID(i int) *PaymentUpdateOne {
	puo.mutation.ResetRentalID()
	puo.mutation.SetRentalID(i)
	return puo
}

// AddRentalID adds i to the "rental_id" field.
func (puo *PaymentUpdateOne) AddRentalID(i int) *PaymentUpdateOne {
	puo.mutation.AddRentalID(i)
	return puo
}

// SetAmount sets the "amount" field.
func (puo *PaymentUpdateOne) SetAmount(f float64) *PaymentUpdateOne {
	puo.mutation.ResetAmount()
	puo.mutation.SetAmount(f)
	return puo
}

// AddAmount adds f to the "amount" field.
func (puo *PaymentUpdateOne) AddAmount(f float64) *PaymentUpdateOne {
	puo.mutation.AddAmount(f)
	return puo
}

// SetPaymentDate sets the "payment_date" field.
func (puo *PaymentUpdateOne) SetPaymentDate(t time.Time) *PaymentUpdateOne {
	puo.mutation.SetPaymentDate(t)
	return puo
}

// SetPayerID sets the "payer" edge to the Customer entity by ID.
func (puo *PaymentUpdateOne) SetPayerID(id int) *PaymentUpdateOne {
	puo.mutation.SetPayerID(id)
	return puo
}

// SetPayer sets the "payer" edge to the Customer entity.
func (puo *PaymentUpdateOne) SetPayer(c *Customer) *PaymentUpdateOne {
	return puo.SetPayerID(c.ID)
}

// Mutation returns the PaymentMutation object of the builder.
func (puo *PaymentUpdateOne) Mutation() *PaymentMutation {
	return puo.mutation
}

// ClearPayer clears the "payer" edge to the Customer entity.
func (puo *PaymentUpdateOne) ClearPayer() *PaymentUpdateOne {
	puo.mutation.ClearPayer()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PaymentUpdateOne) Select(field string, fields ...string) *PaymentUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Payment entity.
func (puo *PaymentUpdateOne) Save(ctx context.Context) (*Payment, error) {
	var (
		err  error
		node *Payment
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PaymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Payment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PaymentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PaymentUpdateOne) SaveX(ctx context.Context) *Payment {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PaymentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PaymentUpdateOne) check() error {
	if _, ok := puo.mutation.PayerID(); puo.mutation.PayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Payment.payer"`)
	}
	return nil
}

func (puo *PaymentUpdateOne) sqlSave(ctx context.Context) (_node *Payment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   payment.Table,
			Columns: payment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: payment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Payment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, payment.FieldID)
		for _, f := range fields {
			if !payment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != payment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.StaffID(); ok {
		_spec.SetField(payment.FieldStaffID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedStaffID(); ok {
		_spec.AddField(payment.FieldStaffID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.RentalID(); ok {
		_spec.SetField(payment.FieldRentalID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedRentalID(); ok {
		_spec.AddField(payment.FieldRentalID, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedAmount(); ok {
		_spec.AddField(payment.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.PaymentDate(); ok {
		_spec.SetField(payment.FieldPaymentDate, field.TypeTime, value)
	}
	if puo.mutation.PayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PayerTable,
			Columns: []string{payment.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.PayerTable,
			Columns: []string{payment.PayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Payment{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{payment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

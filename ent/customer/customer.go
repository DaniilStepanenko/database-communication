// Code generated by ent, DO NOT EDIT.

package customer

const (
	// Label holds the string label denoting the customer type in the database.
	Label = "customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "customer_id"
	// FieldStoreID holds the string denoting the store_id field in the database.
	FieldStoreID = "store_id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldAddressID holds the string denoting the address_id field in the database.
	FieldAddressID = "address_id"
	// FieldActivebool holds the string denoting the activebool field in the database.
	FieldActivebool = "activebool"
	// FieldCreateDate holds the string denoting the create_date field in the database.
	FieldCreateDate = "create_date"
	// FieldLastUpdate holds the string denoting the last_update field in the database.
	FieldLastUpdate = "last_update"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// EdgePayments holds the string denoting the payments edge name in mutations.
	EdgePayments = "payments"
	// PaymentFieldID holds the string denoting the ID field of the Payment.
	PaymentFieldID = "payment_id"
	// Table holds the table name of the customer in the database.
	Table = "customer"
	// PaymentsTable is the table that holds the payments relation/edge.
	PaymentsTable = "payment"
	// PaymentsInverseTable is the table name for the Payment entity.
	// It exists in this package in order to avoid circular dependency with the "payment" package.
	PaymentsInverseTable = "payment"
	// PaymentsColumn is the table column denoting the payments relation/edge.
	PaymentsColumn = "customer_id"
)

// Columns holds all SQL columns for customer fields.
var Columns = []string{
	FieldID,
	FieldStoreID,
	FieldFirstName,
	FieldLastName,
	FieldEmail,
	FieldAddressID,
	FieldActivebool,
	FieldCreateDate,
	FieldLastUpdate,
	FieldActive,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/DaniilStepanenko/database-communication/ent/customer"
	"github.com/DaniilStepanenko/database-communication/ent/payment"
	"github.com/DaniilStepanenko/database-communication/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomer = "Customer"
	TypePayment  = "Payment"
)

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op              Op
	typ             string
	id              *int
	store_id        *int
	addstore_id     *int
	first_name      *string
	last_name       *string
	email           *string
	address_id      *int
	addaddress_id   *int
	activebool      *bool
	create_date     *time.Time
	last_update     *time.Time
	active          *int
	addactive       *int
	clearedFields   map[string]struct{}
	payments        map[int]struct{}
	removedpayments map[int]struct{}
	clearedpayments bool
	done            bool
	oldValue        func(context.Context) (*Customer, error)
	predicates      []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id int) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStoreID sets the "store_id" field.
func (m *CustomerMutation) SetStoreID(i int) {
	m.store_id = &i
	m.addstore_id = nil
}

// StoreID returns the value of the "store_id" field in the mutation.
func (m *CustomerMutation) StoreID() (r int, exists bool) {
	v := m.store_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreID returns the old "store_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldStoreID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreID: %w", err)
	}
	return oldValue.StoreID, nil
}

// AddStoreID adds i to the "store_id" field.
func (m *CustomerMutation) AddStoreID(i int) {
	if m.addstore_id != nil {
		*m.addstore_id += i
	} else {
		m.addstore_id = &i
	}
}

// AddedStoreID returns the value that was added to the "store_id" field in this mutation.
func (m *CustomerMutation) AddedStoreID() (r int, exists bool) {
	v := m.addstore_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStoreID resets all changes to the "store_id" field.
func (m *CustomerMutation) ResetStoreID() {
	m.store_id = nil
	m.addstore_id = nil
}

// SetFirstName sets the "first_name" field.
func (m *CustomerMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *CustomerMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *CustomerMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *CustomerMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *CustomerMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *CustomerMutation) ResetLastName() {
	m.last_name = nil
}

// SetEmail sets the "email" field.
func (m *CustomerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *CustomerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *CustomerMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[customer.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *CustomerMutation) EmailCleared() bool {
	_, ok := m.clearedFields[customer.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *CustomerMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, customer.FieldEmail)
}

// SetAddressID sets the "address_id" field.
func (m *CustomerMutation) SetAddressID(i int) {
	m.address_id = &i
	m.addaddress_id = nil
}

// AddressID returns the value of the "address_id" field in the mutation.
func (m *CustomerMutation) AddressID() (r int, exists bool) {
	v := m.address_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAddressID returns the old "address_id" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldAddressID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddressID: %w", err)
	}
	return oldValue.AddressID, nil
}

// AddAddressID adds i to the "address_id" field.
func (m *CustomerMutation) AddAddressID(i int) {
	if m.addaddress_id != nil {
		*m.addaddress_id += i
	} else {
		m.addaddress_id = &i
	}
}

// AddedAddressID returns the value that was added to the "address_id" field in this mutation.
func (m *CustomerMutation) AddedAddressID() (r int, exists bool) {
	v := m.addaddress_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAddressID resets all changes to the "address_id" field.
func (m *CustomerMutation) ResetAddressID() {
	m.address_id = nil
	m.addaddress_id = nil
}

// SetActivebool sets the "activebool" field.
func (m *CustomerMutation) SetActivebool(b bool) {
	m.activebool = &b
}

// Activebool returns the value of the "activebool" field in the mutation.
func (m *CustomerMutation) Activebool() (r bool, exists bool) {
	v := m.activebool
	if v == nil {
		return
	}
	return *v, true
}

// OldActivebool returns the old "activebool" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldActivebool(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivebool is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivebool requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivebool: %w", err)
	}
	return oldValue.Activebool, nil
}

// ResetActivebool resets all changes to the "activebool" field.
func (m *CustomerMutation) ResetActivebool() {
	m.activebool = nil
}

// SetCreateDate sets the "create_date" field.
func (m *CustomerMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *CustomerMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *CustomerMutation) ResetCreateDate() {
	m.create_date = nil
}

// SetLastUpdate sets the "last_update" field.
func (m *CustomerMutation) SetLastUpdate(t time.Time) {
	m.last_update = &t
}

// LastUpdate returns the value of the "last_update" field in the mutation.
func (m *CustomerMutation) LastUpdate() (r time.Time, exists bool) {
	v := m.last_update
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdate returns the old "last_update" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldLastUpdate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdate: %w", err)
	}
	return oldValue.LastUpdate, nil
}

// ClearLastUpdate clears the value of the "last_update" field.
func (m *CustomerMutation) ClearLastUpdate() {
	m.last_update = nil
	m.clearedFields[customer.FieldLastUpdate] = struct{}{}
}

// LastUpdateCleared returns if the "last_update" field was cleared in this mutation.
func (m *CustomerMutation) LastUpdateCleared() bool {
	_, ok := m.clearedFields[customer.FieldLastUpdate]
	return ok
}

// ResetLastUpdate resets all changes to the "last_update" field.
func (m *CustomerMutation) ResetLastUpdate() {
	m.last_update = nil
	delete(m.clearedFields, customer.FieldLastUpdate)
}

// SetActive sets the "active" field.
func (m *CustomerMutation) SetActive(i int) {
	m.active = &i
	m.addactive = nil
}

// Active returns the value of the "active" field in the mutation.
func (m *CustomerMutation) Active() (r int, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldActive(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// AddActive adds i to the "active" field.
func (m *CustomerMutation) AddActive(i int) {
	if m.addactive != nil {
		*m.addactive += i
	} else {
		m.addactive = &i
	}
}

// AddedActive returns the value that was added to the "active" field in this mutation.
func (m *CustomerMutation) AddedActive() (r int, exists bool) {
	v := m.addactive
	if v == nil {
		return
	}
	return *v, true
}

// ClearActive clears the value of the "active" field.
func (m *CustomerMutation) ClearActive() {
	m.active = nil
	m.addactive = nil
	m.clearedFields[customer.FieldActive] = struct{}{}
}

// ActiveCleared returns if the "active" field was cleared in this mutation.
func (m *CustomerMutation) ActiveCleared() bool {
	_, ok := m.clearedFields[customer.FieldActive]
	return ok
}

// ResetActive resets all changes to the "active" field.
func (m *CustomerMutation) ResetActive() {
	m.active = nil
	m.addactive = nil
	delete(m.clearedFields, customer.FieldActive)
}

// AddPaymentIDs adds the "payments" edge to the Payment entity by ids.
func (m *CustomerMutation) AddPaymentIDs(ids ...int) {
	if m.payments == nil {
		m.payments = make(map[int]struct{})
	}
	for i := range ids {
		m.payments[ids[i]] = struct{}{}
	}
}

// ClearPayments clears the "payments" edge to the Payment entity.
func (m *CustomerMutation) ClearPayments() {
	m.clearedpayments = true
}

// PaymentsCleared reports if the "payments" edge to the Payment entity was cleared.
func (m *CustomerMutation) PaymentsCleared() bool {
	return m.clearedpayments
}

// RemovePaymentIDs removes the "payments" edge to the Payment entity by IDs.
func (m *CustomerMutation) RemovePaymentIDs(ids ...int) {
	if m.removedpayments == nil {
		m.removedpayments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.payments, ids[i])
		m.removedpayments[ids[i]] = struct{}{}
	}
}

// RemovedPayments returns the removed IDs of the "payments" edge to the Payment entity.
func (m *CustomerMutation) RemovedPaymentsIDs() (ids []int) {
	for id := range m.removedpayments {
		ids = append(ids, id)
	}
	return
}

// PaymentsIDs returns the "payments" edge IDs in the mutation.
func (m *CustomerMutation) PaymentsIDs() (ids []int) {
	for id := range m.payments {
		ids = append(ids, id)
	}
	return
}

// ResetPayments resets all changes to the "payments" edge.
func (m *CustomerMutation) ResetPayments() {
	m.payments = nil
	m.clearedpayments = false
	m.removedpayments = nil
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.store_id != nil {
		fields = append(fields, customer.FieldStoreID)
	}
	if m.first_name != nil {
		fields = append(fields, customer.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, customer.FieldLastName)
	}
	if m.email != nil {
		fields = append(fields, customer.FieldEmail)
	}
	if m.address_id != nil {
		fields = append(fields, customer.FieldAddressID)
	}
	if m.activebool != nil {
		fields = append(fields, customer.FieldActivebool)
	}
	if m.create_date != nil {
		fields = append(fields, customer.FieldCreateDate)
	}
	if m.last_update != nil {
		fields = append(fields, customer.FieldLastUpdate)
	}
	if m.active != nil {
		fields = append(fields, customer.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldStoreID:
		return m.StoreID()
	case customer.FieldFirstName:
		return m.FirstName()
	case customer.FieldLastName:
		return m.LastName()
	case customer.FieldEmail:
		return m.Email()
	case customer.FieldAddressID:
		return m.AddressID()
	case customer.FieldActivebool:
		return m.Activebool()
	case customer.FieldCreateDate:
		return m.CreateDate()
	case customer.FieldLastUpdate:
		return m.LastUpdate()
	case customer.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldStoreID:
		return m.OldStoreID(ctx)
	case customer.FieldFirstName:
		return m.OldFirstName(ctx)
	case customer.FieldLastName:
		return m.OldLastName(ctx)
	case customer.FieldEmail:
		return m.OldEmail(ctx)
	case customer.FieldAddressID:
		return m.OldAddressID(ctx)
	case customer.FieldActivebool:
		return m.OldActivebool(ctx)
	case customer.FieldCreateDate:
		return m.OldCreateDate(ctx)
	case customer.FieldLastUpdate:
		return m.OldLastUpdate(ctx)
	case customer.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreID(v)
		return nil
	case customer.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case customer.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case customer.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case customer.FieldAddressID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddressID(v)
		return nil
	case customer.FieldActivebool:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivebool(v)
		return nil
	case customer.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	case customer.FieldLastUpdate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdate(v)
		return nil
	case customer.FieldActive:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	var fields []string
	if m.addstore_id != nil {
		fields = append(fields, customer.FieldStoreID)
	}
	if m.addaddress_id != nil {
		fields = append(fields, customer.FieldAddressID)
	}
	if m.addactive != nil {
		fields = append(fields, customer.FieldActive)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldStoreID:
		return m.AddedStoreID()
	case customer.FieldAddressID:
		return m.AddedAddressID()
	case customer.FieldActive:
		return m.AddedActive()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case customer.FieldStoreID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStoreID(v)
		return nil
	case customer.FieldAddressID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAddressID(v)
		return nil
	case customer.FieldActive:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActive(v)
		return nil
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customer.FieldEmail) {
		fields = append(fields, customer.FieldEmail)
	}
	if m.FieldCleared(customer.FieldLastUpdate) {
		fields = append(fields, customer.FieldLastUpdate)
	}
	if m.FieldCleared(customer.FieldActive) {
		fields = append(fields, customer.FieldActive)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	switch name {
	case customer.FieldEmail:
		m.ClearEmail()
		return nil
	case customer.FieldLastUpdate:
		m.ClearLastUpdate()
		return nil
	case customer.FieldActive:
		m.ClearActive()
		return nil
	}
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldStoreID:
		m.ResetStoreID()
		return nil
	case customer.FieldFirstName:
		m.ResetFirstName()
		return nil
	case customer.FieldLastName:
		m.ResetLastName()
		return nil
	case customer.FieldEmail:
		m.ResetEmail()
		return nil
	case customer.FieldAddressID:
		m.ResetAddressID()
		return nil
	case customer.FieldActivebool:
		m.ResetActivebool()
		return nil
	case customer.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	case customer.FieldLastUpdate:
		m.ResetLastUpdate()
		return nil
	case customer.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payments != nil {
		edges = append(edges, customer.EdgePayments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgePayments:
		ids := make([]ent.Value, 0, len(m.payments))
		for id := range m.payments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpayments != nil {
		edges = append(edges, customer.EdgePayments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgePayments:
		ids := make([]ent.Value, 0, len(m.removedpayments))
		for id := range m.removedpayments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayments {
		edges = append(edges, customer.EdgePayments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgePayments:
		return m.clearedpayments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgePayments:
		m.ResetPayments()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op            Op
	typ           string
	id            *int
	staff_id      *int
	addstaff_id   *int
	rental_id     *int
	addrental_id  *int
	amount        *float64
	addamount     *float64
	payment_date  *time.Time
	clearedFields map[string]struct{}
	payer         *int
	clearedpayer  bool
	done          bool
	oldValue      func(context.Context) (*Payment, error)
	predicates    []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id int) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Payment entities.
func (m *PaymentMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCustomerID sets the "customer_id" field.
func (m *PaymentMutation) SetCustomerID(i int) {
	m.payer = &i
}

// CustomerID returns the value of the "customer_id" field in the mutation.
func (m *PaymentMutation) CustomerID() (r int, exists bool) {
	v := m.payer
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old "customer_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldCustomerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// ResetCustomerID resets all changes to the "customer_id" field.
func (m *PaymentMutation) ResetCustomerID() {
	m.payer = nil
}

// SetStaffID sets the "staff_id" field.
func (m *PaymentMutation) SetStaffID(i int) {
	m.staff_id = &i
	m.addstaff_id = nil
}

// StaffID returns the value of the "staff_id" field in the mutation.
func (m *PaymentMutation) StaffID() (r int, exists bool) {
	v := m.staff_id
	if v == nil {
		return
	}
	return *v, true
}

// OldStaffID returns the old "staff_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldStaffID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStaffID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStaffID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStaffID: %w", err)
	}
	return oldValue.StaffID, nil
}

// AddStaffID adds i to the "staff_id" field.
func (m *PaymentMutation) AddStaffID(i int) {
	if m.addstaff_id != nil {
		*m.addstaff_id += i
	} else {
		m.addstaff_id = &i
	}
}

// AddedStaffID returns the value that was added to the "staff_id" field in this mutation.
func (m *PaymentMutation) AddedStaffID() (r int, exists bool) {
	v := m.addstaff_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetStaffID resets all changes to the "staff_id" field.
func (m *PaymentMutation) ResetStaffID() {
	m.staff_id = nil
	m.addstaff_id = nil
}

// SetRentalID sets the "rental_id" field.
func (m *PaymentMutation) SetRentalID(i int) {
	m.rental_id = &i
	m.addrental_id = nil
}

// RentalID returns the value of the "rental_id" field in the mutation.
func (m *PaymentMutation) RentalID() (r int, exists bool) {
	v := m.rental_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRentalID returns the old "rental_id" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldRentalID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRentalID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRentalID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRentalID: %w", err)
	}
	return oldValue.RentalID, nil
}

// AddRentalID adds i to the "rental_id" field.
func (m *PaymentMutation) AddRentalID(i int) {
	if m.addrental_id != nil {
		*m.addrental_id += i
	} else {
		m.addrental_id = &i
	}
}

// AddedRentalID returns the value that was added to the "rental_id" field in this mutation.
func (m *PaymentMutation) AddedRentalID() (r int, exists bool) {
	v := m.addrental_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRentalID resets all changes to the "rental_id" field.
func (m *PaymentMutation) ResetRentalID() {
	m.rental_id = nil
	m.addrental_id = nil
}

// SetAmount sets the "amount" field.
func (m *PaymentMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *PaymentMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPaymentDate sets the "payment_date" field.
func (m *PaymentMutation) SetPaymentDate(t time.Time) {
	m.payment_date = &t
}

// PaymentDate returns the value of the "payment_date" field in the mutation.
func (m *PaymentMutation) PaymentDate() (r time.Time, exists bool) {
	v := m.payment_date
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentDate returns the old "payment_date" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldPaymentDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentDate: %w", err)
	}
	return oldValue.PaymentDate, nil
}

// ResetPaymentDate resets all changes to the "payment_date" field.
func (m *PaymentMutation) ResetPaymentDate() {
	m.payment_date = nil
}

// SetPayerID sets the "payer" edge to the Customer entity by id.
func (m *PaymentMutation) SetPayerID(id int) {
	m.payer = &id
}

// ClearPayer clears the "payer" edge to the Customer entity.
func (m *PaymentMutation) ClearPayer() {
	m.clearedpayer = true
}

// PayerCleared reports if the "payer" edge to the Customer entity was cleared.
func (m *PaymentMutation) PayerCleared() bool {
	return m.clearedpayer
}

// PayerID returns the "payer" edge ID in the mutation.
func (m *PaymentMutation) PayerID() (id int, exists bool) {
	if m.payer != nil {
		return *m.payer, true
	}
	return
}

// PayerIDs returns the "payer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PayerID instead. It exists only for internal usage by the builders.
func (m *PaymentMutation) PayerIDs() (ids []int) {
	if id := m.payer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPayer resets all changes to the "payer" edge.
func (m *PaymentMutation) ResetPayer() {
	m.payer = nil
	m.clearedpayer = false
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.payer != nil {
		fields = append(fields, payment.FieldCustomerID)
	}
	if m.staff_id != nil {
		fields = append(fields, payment.FieldStaffID)
	}
	if m.rental_id != nil {
		fields = append(fields, payment.FieldRentalID)
	}
	if m.amount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.payment_date != nil {
		fields = append(fields, payment.FieldPaymentDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldCustomerID:
		return m.CustomerID()
	case payment.FieldStaffID:
		return m.StaffID()
	case payment.FieldRentalID:
		return m.RentalID()
	case payment.FieldAmount:
		return m.Amount()
	case payment.FieldPaymentDate:
		return m.PaymentDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldCustomerID:
		return m.OldCustomerID(ctx)
	case payment.FieldStaffID:
		return m.OldStaffID(ctx)
	case payment.FieldRentalID:
		return m.OldRentalID(ctx)
	case payment.FieldAmount:
		return m.OldAmount(ctx)
	case payment.FieldPaymentDate:
		return m.OldPaymentDate(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldCustomerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	case payment.FieldStaffID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStaffID(v)
		return nil
	case payment.FieldRentalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRentalID(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case payment.FieldPaymentDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentDate(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	var fields []string
	if m.addstaff_id != nil {
		fields = append(fields, payment.FieldStaffID)
	}
	if m.addrental_id != nil {
		fields = append(fields, payment.FieldRentalID)
	}
	if m.addamount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldStaffID:
		return m.AddedStaffID()
	case payment.FieldRentalID:
		return m.AddedRentalID()
	case payment.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case payment.FieldStaffID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStaffID(v)
		return nil
	case payment.FieldRentalID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRentalID(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	case payment.FieldStaffID:
		m.ResetStaffID()
		return nil
	case payment.FieldRentalID:
		m.ResetRentalID()
		return nil
	case payment.FieldAmount:
		m.ResetAmount()
		return nil
	case payment.FieldPaymentDate:
		m.ResetPaymentDate()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.payer != nil {
		edges = append(edges, payment.EdgePayer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case payment.EdgePayer:
		if id := m.payer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpayer {
		edges = append(edges, payment.EdgePayer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	switch name {
	case payment.EdgePayer:
		return m.clearedpayer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	switch name {
	case payment.EdgePayer:
		m.ClearPayer()
		return nil
	}
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	switch name {
	case payment.EdgePayer:
		m.ResetPayer()
		return nil
	}
	return fmt.Errorf("unknown Payment edge %s", name)
}

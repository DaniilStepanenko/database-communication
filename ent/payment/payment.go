// Code generated by ent, DO NOT EDIT.

package payment

const (
	// Label holds the string label denoting the payment type in the database.
	Label = "payment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "payment_id"
	// FieldCustomerID holds the string denoting the customer_id field in the database.
	FieldCustomerID = "customer_id"
	// FieldStaffID holds the string denoting the staff_id field in the database.
	FieldStaffID = "staff_id"
	// FieldRentalID holds the string denoting the rental_id field in the database.
	FieldRentalID = "rental_id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldPaymentDate holds the string denoting the payment_date field in the database.
	FieldPaymentDate = "payment_date"
	// EdgePayer holds the string denoting the payer edge name in mutations.
	EdgePayer = "payer"
	// CustomerFieldID holds the string denoting the ID field of the Customer.
	CustomerFieldID = "customer_id"
	// Table holds the table name of the payment in the database.
	Table = "payment"
	// PayerTable is the table that holds the payer relation/edge.
	PayerTable = "payment"
	// PayerInverseTable is the table name for the Customer entity.
	// It exists in this package in order to avoid circular dependency with the "customer" package.
	PayerInverseTable = "customer"
	// PayerColumn is the table column denoting the payer relation/edge.
	PayerColumn = "customer_id"
)

// Columns holds all SQL columns for payment fields.
var Columns = []string{
	FieldID,
	FieldCustomerID,
	FieldStaffID,
	FieldRentalID,
	FieldAmount,
	FieldPaymentDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
